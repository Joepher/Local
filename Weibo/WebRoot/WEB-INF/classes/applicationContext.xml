<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="dataSourceID" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver">
		</property>
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost:3306/mysql?useUnicode=true&amp;characterEncoding=UTF-8">
		</property>
		<property name="user" value="root"></property>
		<property name="password" value="e21341518"></property>
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize">
			<value>5</value>
		</property>

		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>30</value>
		</property>

		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>10</value>
		</property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>60</value>
		</property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>5</value>
		</property>

		<!--
			JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。
			但由于预缓存的statements属于单个connection而不是整个连接池。 所以设置这个参数需要考虑到多方面的因素。
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。 Default: 0
		-->
		<property name="maxStatements">
			<value>0</value>
		</property>

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>

		<!--
			获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。
			但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。
			如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。 Default: false
		-->
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>

		<!--
			因性能消耗大请只在需要的时候使用它。 如果设为true那么在每个connection提交的 时候都将校验其有效性。
			建议使用idleConnectionTestPeriod或automaticTestTable 等方法来提升连接测试的性能。
			Default: false
		-->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>

	<!-- 创建sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSourceID" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.connection.release_mode">auto</prop>
				<prop key="hibernate.autoReconnect">true</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>weibo/hibernate/Login.hbm.xml</value>
				<value>weibo/hibernate/Profile.hbm.xml</value>
				<value>weibo/hibernate/Userinfo.hbm.xml</value>
				<value>weibo/hibernate/FansManage.hbm.xml</value>
				<value>weibo/hibernate/Atme.hbm.xml</value>
				<value>weibo/hibernate/Comment.hbm.xml</value>
				<value>weibo/hibernate/FollowGroup.hbm.xml</value>
				<value>weibo/hibernate/MsgNotice.hbm.xml</value>
				<value>
					weibo/hibernate/TransmitCollection.hbm.xml
				</value>
				<value>weibo/hibernate/Count.hbm.xml</value>
			</list>
		</property>
	</bean>

	<bean id="UserServ" class="weibo.serviceImpl.UserServImpl"></bean>
	<bean id="MsgServ" class="weibo.serviceImpl.MsgServImpl"></bean>
	<bean id="CommentServ" class="weibo.serviceImpl.CommentServImpl"></bean>
	<bean id="FansServ" class="weibo.serviceImpl.FansServImpl"></bean>
	<bean id="ProfileServ" class="weibo.serviceImpl.ProfileServImpl"></bean>
	<bean id="PageServ" class="weibo.serviceImpl.PageServImpl"></bean>

	<bean id="LoginDAO" class="weibo.hibernate.LoginDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="Upload" class="weibo.action.UploadAction" scope="prototype"></bean>
	<bean id="ProfileDAO" class="weibo.hibernate.ProfileDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="UserinfoDAO" class="weibo.hibernate.UserinfoDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="FansManageDAO" class="weibo.hibernate.FansManageDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="AtmeDAO" class="weibo.hibernate.AtmeDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="CommentDAO" class="weibo.hibernate.CommentDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="FollowGroupDAO" class="weibo.hibernate.FollowGroupDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="MsgNoticeDAO" class="weibo.hibernate.MsgNoticeDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="TransmitCollectionDAO" class="weibo.hibernate.TransmitCollectionDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="CountDAO" class="weibo.hibernate.CountDAO">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
</beans>